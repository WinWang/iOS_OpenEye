
// 以下是几个常用的支持处理nil值的iOS JSON解析库:

// 1. ObjectMapper
// 优点:
// - 支持nil值处理
// - 支持自定义转换
// - 使用简单,只需实现Mappable协议
let json = """
{
    "name": null,
    "age": 20
}
"""

// 2. SwiftyJSON
// 优点:
// - 链式语法
// - 安全处理nil值
// - 类型转换方便
if let data = json.data(using: .utf8) {
    let json = try? JSON(data: data)
    let name = json["name"].string // 安全获取nil值
}

// 3. Codable(原生)
// 优点:
// - 系统原生支持
// - 性能好
// - 支持可选类型处理nil
struct Person: Codable {
    let name: String?  // 使用可选类型处理nil
    let age: Int
}

// 4. HandyJSON
// 优点:
// - 支持nil值
// - 无需定义所有字段
// - 支持继承映射
class HandyPerson: HandyJSON {
    var name: String?
    var age: Int = 0
    required init() {}
}

// 5. MJExtension 
// 优点:
// - OC/Swift混编支持好
// - nil值处理完善
// - 使用简单


// 示例: 本地属性与网络属性混合使用
struct Person: Codable {
    // 使用可选类型处理所有网络返回的属性,避免解析失败
    let name: String?
    let age: Int?
    let localId: String = UUID().uuidString
    
    // 添加编码解码方法
    enum CodingKeys: String, CodingKey {
        case name
        case age
        case localId
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        age = try container.decodeIfPresent(Int.self, forKey: .age)
    }
}

// 使用示例
let jsonString = """
{
    "name": null,
    "itemType": null,
    "type": null,
    "data": null,
    "id": null,
    "adIndex": null,
    "bannerList": null
}
"""

if let jsonData = jsonString.data(using: .utf8) {
    do {
        let person = try JSONDecoder().decode(Person.self, from: jsonData)
        print("name: \(person.name ?? "nil")")  // name: nil
        print("age: \(person.age)")  // age: 20
        print("localId: \(person.localId)")  // localId: 随机UUID
    } catch {
        print("解码失败: \(error)")
    }
}


struct HomeModelIssueListItemList: BaseItem,Codable {
    var itemType: Int = HomeItemType.list
    var type: String?
    var data: HomeModelIssueListItemListData?
    var id: Int?
    var adIndex: Int?
    var bannerList: [HomeModelIssueListItemList]?
    
    enum CodingKeys: String, CodingKey {
           case itemType
           case type
           case data
           case id
           case adIndex
           case bannerList
    }
    
    // 添加初始化方法
    init(itemType: Int = HomeItemType.list,
         type: String? = nil,
         data: HomeModelIssueListItemListData? = nil,
         id: Int? = nil,
         adIndex: Int? = nil,
         bannerList: [HomeModelIssueListItemList]? = nil) {
        self.itemType = itemType
        self.type = type
        self.data = data
        self.id = id
        self.adIndex = adIndex
        self.bannerList = bannerList
    }

    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        // 安全解码，如果 itemType 为 null 或缺失，使用默认值
        self.itemType = try container.decodeIfPresent(Int.self, forKey: .itemType) ?? HomeItemType.list
        self.type = try container.decodeIfPresent(String.self, forKey: .type)
        self.data = try container.decodeIfPresent(HomeModelIssueListItemListData.self, forKey: .data)
        self.id = try container.decodeIfPresent(Int.self, forKey: .id)
        self.adIndex = try container.decodeIfPresent(Int.self, forKey: .adIndex)
        self.bannerList = try container.decodeIfPresent([HomeModelIssueListItemList].self, forKey: .bannerList)
    }

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(itemType, forKey: .itemType)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(adIndex, forKey: .adIndex)
        try container.encodeIfPresent(bannerList, forKey: .bannerList)
    }
}


// FSPagerView Banner示例代码
class BannerViewController: UIViewController, FSPagerViewDataSource, FSPagerViewDelegate {
    
    private let pagerView: FSPagerView = {
        let view = FSPagerView()
        view.translatesAutoresizingMaskIntoConstraints = false
        // 自动滚动时间间隔
        view.automaticSlidingInterval = 3.0
        // 是否无限循环
        view.isInfinite = true
        // 交互方式
        view.interitemSpacing = 0
        // 注册cell
        view.register(FSPagerViewCell.self, forCellWithReuseIdentifier: "cell")
        return view
    }()
    
    private let pageControl: FSPageControl = {
        let control = FSPageControl()
        control.translatesAutoresizingMaskIntoConstraints = false
        // 设置页面指示器样式
        control.setFillColor(.white, for: .selected)
        control.setFillColor(.gray, for: .normal)
        return control
    }()
    
    private var bannerData: [HomeModelIssueListItemList] = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    private func setupUI() {
        view.addSubview(pagerView)
        view.addSubview(pageControl)
        
        // 设置约束
        NSLayoutConstraint.activate([
            pagerView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            pagerView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            pagerView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            pagerView.heightAnchor.constraint(equalToConstant: 200),
            
            pageControl.topAnchor.constraint(equalTo: pagerView.bottomAnchor, constant: 8),
            pageControl.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
        
        pagerView.dataSource = self
        pagerView.delegate = self
    }
    
    // 更新Banner数据
    func updateBannerData(_ data: [HomeModelIssueListItemList]) {
        bannerData = data
        pageControl.numberOfPages = data.count
        pagerView.reloadData()
    }
    
    // MARK: - FSPagerViewDataSource
    func numberOfItems(in pagerView: FSPagerView) -> Int {
        return bannerData.count
    }
    
    func pagerView(_ pagerView: FSPagerView, cellForItemAt index: Int) -> FSPagerViewCell {
        let cell = pagerView.dequeueReusableCell(withReuseIdentifier: "cell", at: index)
        let banner = bannerData[index]
        
        // 设置图片
        if let imageUrl = banner.data?.cover?.feed {
            cell.imageView?.kf.setImage(with: URL(string: imageUrl))
        }
        
        return cell
    }
    
    // MARK: - FSPagerViewDelegate
    func pagerViewWillEndDragging(_ pagerView: FSPagerView, targetIndex: Int) {
        pageControl.currentPage = targetIndex
    }
    
    func pagerViewDidEndScrollAnimation(_ pagerView: FSPagerView) {
        pageControl.currentPage = pagerView.currentIndex
    }
    
    func pagerView(_ pagerView: FSPagerView, didSelectItemAt index: Int) {
        // 处理Banner点击事件
        let banner = bannerData[index]
        // TODO: 处理跳转逻辑
    }
}
// 3列垂直表格示例
class ThreeColumnTableViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
    
    private let tableView: UITableView = {
        let table = UITableView()
        table.translatesAutoresizingMaskIntoConstraints = false
        table.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
        return table
    }()
    
    // 模拟数据源
    private let dataSource: [[String]] = [
        ["第1列1行", "第1列2行", "第1列3行"],
        ["第2列1行", "第2列2行", "第2列3行"],
        ["第3列1行", "第3列2行", "第3列3行"]
    ]
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    private func setupUI() {
        view.addSubview(tableView)
        
        // 设置约束
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        tableView.dataSource = self
        tableView.delegate = self
        
        // 创建3个等宽的列
        let columnWidth = view.bounds.width / 3
        let columnViews = (0..<3).map { column -> UIView in
            let columnView = UIView()
            columnView.translatesAutoresizingMaskIntoConstraints = false
            columnView.backgroundColor = .white
            
            // 创建列标题
            let titleLabel = UILabel()
            titleLabel.translatesAutoresizingMaskIntoConstraints = false
            titleLabel.text = "第\(column + 1)列"
            titleLabel.textAlignment = .center
            
            columnView.addSubview(titleLabel)
            
            // 设置列标题约束
            NSLayoutConstraint.activate([
                titleLabel.topAnchor.constraint(equalTo: columnView.topAnchor, constant: 8),
                titleLabel.leadingAnchor.constraint(equalTo: columnView.leadingAnchor),
                titleLabel.trailingAnchor.constraint(equalTo: columnView.trailingAnchor),
                titleLabel.heightAnchor.constraint(equalToConstant: 30)
            ])
            
            return columnView
        }
        
        // 添加列视图到主视图
        columnViews.forEach { view.addSubview($0) }
        
        // 设置列视图约束
        for (index, columnView) in columnViews.enumerated() {
            NSLayoutConstraint.activate([
                columnView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
                columnView.widthAnchor.constraint(equalToConstant: columnWidth),
                columnView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
            ])
            
            if index == 0 {
                columnView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
            } else {
                columnView.leadingAnchor.constraint(equalTo: columnViews[index - 1].trailingAnchor).isActive = true
            }
        }
    }
    
    // MARK: - UITableViewDataSource
    func numberOfSections(in tableView: UITableView) -> Int {
        return 3 // 3列
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataSource[section].count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
        cell.textLabel?.text = dataSource[indexPath.section][indexPath.row]
        return cell
    }
    
    // MARK: - UITableViewDelegate
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView = UIView()
        headerView.backgroundColor = .lightGray
        
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.text = "第\(section + 1)列"
        label.textAlignment = .center
        
        headerView.addSubview(label)
        
        NSLayoutConstraint.activate([
            label.topAnchor.constraint(equalTo: headerView.topAnchor),
            label.leadingAnchor.constraint(equalTo: headerView.leadingAnchor),
            label.trailingAnchor.constraint(equalTo: headerView.trailingAnchor),
            label.bottomAnchor.constraint(equalTo: headerView.bottomAnchor)
        ])
        
        return headerView
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 40
    }
}



// JXSegmentedView 示例代码
class SegmentedViewController: UIViewController {
    
    private let segmentedView: JXSegmentedView = {
        let view = JXSegmentedView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private let contentView: JXSegmentedListContainerView!
    
    // 标题数据源
    private let titles = ["推荐", "热门", "关注"]
    private lazy var dataSource: JXSegmentedTitleDataSource = {
        let source = JXSegmentedTitleDataSource()
        source.titles = titles
        source.titleNormalColor = .gray
        source.titleSelectedColor = .black
        source.titleNormalFont = .systemFont(ofSize: 15)
        source.titleSelectedFont = .boldSystemFont(ofSize: 15)
        source.isTitleColorGradientEnabled = true
        return source
    }()
    
    // 指示器
    private lazy var indicator: JXSegmentedIndicatorLineView = {
        let indicator = JXSegmentedIndicatorLineView()
        indicator.indicatorWidth = JXSegmentedViewAutomaticDimension
        indicator.indicatorHeight = 3
        indicator.indicatorColor = .red
        indicator.indicatorPosition = .bottom
        return indicator
    }()
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        contentView = JXSegmentedListContainerView(dataSource: self)
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    private func setupUI() {
        view.backgroundColor = .white
        
        // 配置segmentedView
        view.addSubview(segmentedView)
        view.addSubview(contentView)
        
        // 设置数据源
        segmentedView.dataSource = dataSource
        
        // 设置指示器
        segmentedView.indicators = [indicator]
        
        // 关联contentView
        segmentedView.listContainer = contentView
        
        // 设置布局约束
        NSLayoutConstraint.activate([
            segmentedView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            segmentedView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            segmentedView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            segmentedView.heightAnchor.constraint(equalToConstant: 50),
            
            contentView.topAnchor.constraint(equalTo: segmentedView.bottomAnchor),
            contentView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            contentView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            contentView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
}

// MARK: - JXSegmentedListContainerViewDataSource
extension SegmentedViewController: JXSegmentedListContainerViewDataSource {
    func numberOfLists(in listContainerView: JXSegmentedListContainerView) -> Int {
        return titles.count
    }
    
    func listContainerView(_ listContainerView: JXSegmentedListContainerView, initListAt index: Int) -> JXSegmentedListContainerViewListDelegate {
        // 创建对应的列表控制器
        let vc = ListViewController()
        vc.title = titles[index]
        return vc
    }
}

// 列表控制器
class ListViewController: UIViewController, JXSegmentedListContainerViewListDelegate {
    
    private let tableView: UITableView = {
        let table = UITableView()
        table.translatesAutoresizingMaskIntoConstraints = false
        table.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
        return table
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    private func setupUI() {
        view.addSubview(tableView)
        
        tableView.dataSource = self
        
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
    
    // JXSegmentedListContainerViewListDelegate
    func listView() -> UIView {
        return view
    }
}

// MARK: - UITableViewDataSource
extension ListViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 20
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
        cell.textLabel?.text = "\(title ?? "") - 第\(indexPath.row + 1)行"
        return cell
    }
}







// GridView样式的TableView实现
class GridViewController: UIViewController {
    
    private let tableView: UITableView = {
        let table = UITableView()
        table.translatesAutoresizingMaskIntoConstraints = false
        table.register(GridTableViewCell.self, forCellReuseIdentifier: "GridCell")
        table.separatorStyle = .none
        return table
    }()
    
    // 模拟数据源 - 每行3列数据
    private var dataSource: [[String]] = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupData()
        setupUI()
    }
    
    private func setupData() {
        // 生成测试数据 - 15个项目,每行3列
        let items = (1...15).map { "项目\($0)" }
        dataSource = stride(from: 0, to: items.count, by: 3).map {
            Array(items[$0..<min($0 + 3, items.count)])
        }
    }
    
    private func setupUI() {
        view.backgroundColor = .white
        view.addSubview(tableView)
        
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        tableView.dataSource = self
        tableView.delegate = self
    }
}

// MARK: - UITableViewDataSource & UITableViewDelegate
extension GridViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataSource.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "GridCell", for: indexPath) as! GridTableViewCell
        cell.configure(with: dataSource[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100 // 固定行高
    }
}

// 自定义网格Cell
class GridTableViewCell: UITableViewCell {
    
    private var itemViews: [GridItemView] = []
    
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        selectionStyle = .none
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func configure(with items: [String]) {
        // 清除现有的itemViews
        itemViews.forEach { $0.removeFromSuperview() }
        itemViews.removeAll()
        
        // 创建新的itemViews
        for (index, item) in items.enumerated() {
            let itemView = GridItemView()
            itemView.translatesAutoresizingMaskIntoConstraints = false
            itemView.configure(with: item)
            contentView.addSubview(itemView)
            itemViews.append(itemView)
            
            // 设置约束
            let width = contentView.bounds.width / 3
            NSLayoutConstraint.activate([
                itemView.topAnchor.constraint(equalTo: contentView.topAnchor),
                itemView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: CGFloat(index) * width),
                itemView.widthAnchor.constraint(equalToConstant: width),
                itemView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)
            ])
        }
    }
}

// 网格项视图
class GridItemView: UIView {
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.textAlignment = .center
        label.font = .systemFont(ofSize: 14)
        return label
    }()
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupUI()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    private func setupUI() {
        backgroundColor = .white
        
        // 添加分隔线
        let separator = UIView()
        separator.translatesAutoresizingMaskIntoConstraints = false
        separator.backgroundColor = .lightGray
        
        addSubview(titleLabel)
        addSubview(separator)
        
        NSLayoutConstraint.activate([
            titleLabel.centerXAnchor.constraint(equalTo: centerXAnchor),
            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor),
            
            separator.leadingAnchor.constraint(equalTo: leadingAnchor),
            separator.trailingAnchor.constraint(equalTo: trailingAnchor),
            separator.bottomAnchor.constraint(equalTo: bottomAnchor),
            separator.heightAnchor.constraint(equalToConstant: 0.5)
        ])
    }
    
    func configure(with title: String) {
        titleLabel.text = title
    }
}


// CollectionView Grid布局示例
class GridCollectionViewController: UIViewController {
    
    private let collectionView: UICollectionView = {
        // 创建网格布局
        let layout = UICollectionViewFlowLayout()
        layout.minimumLineSpacing = 10
        layout.minimumInteritemSpacing = 10
        layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)
        
        // 计算每个item的大小(每行3个)
        let itemWidth = (UIScreen.main.bounds.width - 40) / 3
        layout.itemSize = CGSize(width: itemWidth, height: itemWidth)
        
        let collection = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collection.translatesAutoresizingMaskIntoConstraints = false
        collection.backgroundColor = .white
        collection.register(GridCollectionViewCell.self, forCellWithReuseIdentifier: "GridCell")
        return collection
    }()
    
    // 模拟数据源
    private let dataSource = (1...20).map { "项目\($0)" }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    private func setupUI() {
        view.backgroundColor = .white
        view.addSubview(collectionView)
        
        // 设置约束
        NSLayoutConstraint.activate([
            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        collectionView.dataSource = self
        collectionView.delegate = self
    }
}

// MARK: - UICollectionViewDataSource & UICollectionViewDelegate
extension GridCollectionViewController: UICollectionViewDataSource, UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return dataSource.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "GridCell", for: indexPath) as! GridCollectionViewCell
        cell.configure(with: dataSource[indexPath.item])
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        print("选中了: \(dataSource[indexPath.item])")
    }
}

// 自定义CollectionViewCell
class GridCollectionViewCell: UICollectionViewCell {
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.textAlignment = .center
        label.numberOfLines = 0
        return label
    }()
    
    private let imageView: UIImageView = {
        let imageView = UIImageView()
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.contentMode = .scaleAspectFit
        imageView.backgroundColor = .lightGray
        return imageView
    }()
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupUI()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    private func setupUI() {
        contentView.backgroundColor = .white
        contentView.layer.cornerRadius = 8
        contentView.layer.borderWidth = 1
        contentView.layer.borderColor = UIColor.lightGray.cgColor
        
        contentView.addSubview(imageView)
        contentView.addSubview(titleLabel)
        
        NSLayoutConstraint.activate([
            imageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),
            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),
            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),
            imageView.heightAnchor.constraint(equalTo: imageView.widthAnchor),
            
            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),
            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),
            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),
            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8)
        ])
    }
    
    func configure(with title: String) {
        titleLabel.text = title
    }
}



